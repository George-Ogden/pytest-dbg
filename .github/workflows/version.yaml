name: Sync Version from dbg

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  sync-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clone dbg
        run: |
          git clone https://github.com/George-Ogden/dbg.git /tmp/external-repo
          cd /tmp/external-repo
          VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo $VERSION | tee /tmp/new-version.txt

      - name: Compare versions
        id: compare
        run: |
          CURRENT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          NEW_VERSION=$(cat /tmp/new-version.txt)

          echo "Current version: '$CURRENT_VERSION'"
          echo "New version: '$NEW_VERSION'"

          BRANCH_NAME="update-version-$NEW_VERSION"

          if [ "$CURRENT_VERSION" != "$NEW_VERSION" ] && ! ( git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME" ); then
            echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            echo "update_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Create pull request branch and setup Git identity
        if: steps.compare.outputs.update_needed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b "$BRANCH_NAME"

      - name: Update version file
        if: steps.compare.outputs.update_needed == 'true'
        run: |
          NEW_VERSION=$(cat /tmp/new-version.txt)

          cat pyproject.toml | sed "s/^version.*/version = \"$NEW_VERSION\"/" | tee /tmp/pyproject.toml
          cat requirements.txt | sed "s,^debug @.*,debug @ git+https://github.com/George-Ogden/dbg.git@v$NEW_VERSION#egg=debug," | tee /tmp/requirements.txt
          cp /tmp/pyproject.toml pyproject.toml
          cp /tmp/requirements.txt requirements.txt

          git add pyproject.toml requirements.txt
          git commit -m "Automated version change"

      - name: Push changes
        if: steps.compare.outputs.update_needed == 'true'
        run: |
          git push origin "$BRANCH_NAME"

      - name: Create Pull Request
        if: steps.compare.outputs.update_needed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create --title "Automated Version Sync" --body "Update version to ${{ steps.compare.outputs.new_version }}" --head "$BRANCH_NAME" --base "master"
